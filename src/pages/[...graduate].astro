---
import type { GetStaticPaths } from 'astro'
import Layout from '@layouts/Layout.astro'
import Header from '@components/ui/Header.astro'
import Footer from '@components/ui/Footer.astro'
import Paragraph from '@components/ui/Paragraph.astro'
import { GRADUATES } from '@data/GRADUATES'
import { getPath } from '@utils/getPath'
import { YouTube } from '@astro-community/astro-embed-youtube'
import { Image } from 'astro:assets'
import Button from '@components/ui/Button.astro'
import { getNextPath } from '@utils/getNextPath'
import { getPrevPath } from '@utils/getPrevPath'

export const getStaticPaths = (() => {
	return GRADUATES.map((graduate) => {
		return {
			params: { graduate: getPath(graduate.name) },
			props: { ...graduate }
		}
	})
}) satisfies GetStaticPaths

const {
	name,
	full_name,
	project_name,
	project_year,
	project_description,
	project_images,
	video_id
} = Astro.props
---

<Layout title={name + ' - ' + project_name}>
	<Header />
	<main
		class:list={[
			'px-4 pt-20 text-primary flex gap-10 flex-col w-full max-w-2xl relative mx-auto',
			' landscape:flex-row landscape:justify-center landscape:max-w-7xl'
		]}
	>
		<aside
			class='sticky top-4 landscape:top-10 mb-10 aspect-video w-full h-full max-w-2xl overflow-hidden rounded-2xl'
		>
			<YouTube id={video_id} class='aspect-video' />
		</aside>
		<article class='grid gap-4 h-full w-full mt-1'>
			<h1 class='font-title text-5xl font-black uppercase'>
				{full_name}
			</h1>

			<h2 class='font-title text-3xl md:text-4xl font-extralight -mt-4 mb-4 sm:-mt-5 sm:mb-5'>
				{project_name} - <span class='font-bold'>{project_year}</span>
			</h2>
			<Paragraph text={project_description} class='font-paragraph' />
			<figure class='columns-[3_125px] gap-x-4 my-8'>
				{
					project_images.map((image, i) => (
						<a
							id={`image_wrapper-${i}`}
							data-index={i}
							href='#gallery'
							class='block mb-4 rounded-xl overflow-hidden hover:outline outline-8 outline-primary transition-[outline] duration-150'
						>
							<Image src={image} alt='asdads' width={200} class='max-w-full' />
						</a>
					))
				}
			</figure>
		</article>

		<section
			id='gallery'
			class='swiper-gallery flex flex-col w-full h-full fixed left-0 top-0 right-0 bottom-0 backdrop-blur-md bg-transparent'
			style='display: none;'
		>
			<figure class='swiper-wrapper flex h-full'>
				{
					project_images.map((photo, i) => (
						<div class='swiper-slide cursor-grab shrink-0 max-h-[92%] sm:max-h-[90%]'>
							<div class='swiper-zoom-container'>
								<Image
									src={photo}
									data-index={i}
									alt={`Materíal gráfico de la arquitecta ${name}`}
									class='px-6 py-4 w-full h-full object-contain'
									height={photo.height / 2}
									width={photo.width / 2}
								/>
							</div>
						</div>
					))
				}
			</figure>
			<div class='swiper-pagination h-fit text-center font-source-code py-2 sticky bottom-14'></div>
			<Button id='close_gallery' class='sticky bottom-4 mx-auto'>
				Cerrar Galería <svg
					xmlns='http://www.w3.org/2000/svg'
					class='inline-block'
					width='20'
					height='20'
					viewBox='0 0 24 24'
					stroke-width='2'
					stroke='currentColor'
					fill='none'
					stroke-linecap='round'
					stroke-linejoin='round'
					><path stroke='none' d='M0 0h24v24H0z' fill='none'></path><path d='M18 6l-12 12'
					></path><path d='M6 6l12 12'></path></svg
				>
			</Button>
		</section>
	</main>
	<Footer class='h-full'>
		<div class='flex items-center justify-between'>
			<Button as='a' href={getPrevPath(name)}>Ir al Anterior</Button>
			<Button as='a' href={getNextPath(name)}>Ir al Siguiente</Button>
		</div>
	</Footer>
</Layout>

<script>
	import Swiper from 'swiper'
	import { Pagination, Zoom } from 'swiper/modules'
	const swiper = new Swiper('.swiper-gallery', {
		modules: [Pagination, Zoom],
		pagination: {
			el: '.swiper-pagination',
			type: 'fraction'
		},
		zoom: {
			maxRatio: 4
		}
	})
	// Swiper config

	// Get Elements
	const body = document.body as HTMLBodyElement
	const gallery = document.getElementById('gallery') as HTMLElement
	const images = document.querySelectorAll('[id*=image_wrapper]') as NodeListOf<HTMLAnchorElement>
	const closeGalleryBtn = document.getElementById('close_gallery') as HTMLButtonElement

	function showGallery(e: Event, index: string | null) {
		e.preventDefault()
		if (index) swiper.slideTo(+index, 0, false)

		gallery.removeAttribute('style')
		body.style.overflow = 'hidden'
	}

	function closeGallery(e: Event) {
		e.preventDefault()

		gallery.setAttribute('style', 'display:none')
		body.style.overflow = ''
	}

	// Event Listener
	images.forEach((image) => {
		const index = image.getAttribute('data-index')
		image.addEventListener('click', (e) => showGallery(e, index))
	})

	closeGalleryBtn.addEventListener('click', closeGallery)
</script>
